{"version":3,"file":"static/js/915.58dd9089.chunk.js","mappings":"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","sources":["../node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({\n        chainId: this.supportedChainIds && this.supportedChainIds.length > 0 ? this.supportedChainIds[0] : 1\n      })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"names":["URI_AVAILABLE","UserRejectedRequestError","_this","name","constructor","message","_inheritsLoose","Error","getSupportedChains","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","this","emitUpdate","accounts","account","emitDeactivate","walletConnectProvider","stop","removeListener","activate","_this4","enable","then","error","on","provider","wc","connected","createSession","length","emit","uri","m","WalletConnectProvider","e","getProvider","getChainId","send","getAccount","deactivate","close","_this12$walletConnect","AbstractConnector"],"sourceRoot":""}