{"version":3,"file":"static/js/347.333940e4.chunk.js","mappings":"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","sources":["../node_modules/@web3-react/portis-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","PortisConnector","dAppId","networks","config","_ref$config","chainIds","map","n","Number","chainId","every","c","_this","supportedChainIds","handleOnLogout","bind","handleOnActiveWalletChanged","handleOnError","_inheritsLoose","_proto","this","emitDeactivate","account","emitUpdate","error","emitError","activate","_this3","portis","onLogout","onActiveWalletChanged","onError","provider","enable","then","accounts","m","Portis","e","getProvider","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","_this11","close","_this13","logout","AbstractConnector"],"sourceRoot":""}